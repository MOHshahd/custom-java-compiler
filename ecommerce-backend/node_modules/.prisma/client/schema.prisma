generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
}

enum OrderStatus {
  PENDING
  COMPLETED
  CANCELLED
}

enum PaymentStatus {
  PENDING
  SUCCESS
  FAILED
}

model User {
  id                Int               @id @default(autoincrement())
  email             String            @unique
  password          String
  name              String
  role              Role              @default(USER)
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  orders            Order[]
  cart              Cart?
  reviews           Review[]
  shippingAddresses ShippingAddress[]
  wishlist          Wishlist?
}

model Category {
  id       Int       @id @default(autoincrement())
  name     String    @unique
  products Product[]
}

model Product {
  id               Int               @id @default(autoincrement())
  name             String
  description      String?
  price            Float
  stock            Int
  category         Category?         @relation(fields: [categoryId], references: [id])
  categoryId       Int?
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  reviews          Review[]
  cartProducts     CartProduct[]
  orderProducts    OrderProduct[]
  wishlistProducts WishlistProduct[]
}

model Order {
  id              Int              @id @default(autoincrement())
  user            User             @relation(fields: [userId], references: [id])
  userId          Int
  total           Float
  status          OrderStatus      @default(PENDING)
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  orderProducts   OrderProduct[]
  payment         Payment?
  shippingAddress ShippingAddress?
}

model OrderProduct {
  id        Int     @id @default(autoincrement())
  order     Order   @relation(fields: [orderId], references: [id])
  orderId   Int
  product   Product @relation(fields: [productId], references: [id])
  productId Int
  quantity  Int
}

model Cart {
  id           Int           @id @default(autoincrement())
  user         User          @relation(fields: [userId], references: [id])
  userId       Int           @unique
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  cartProducts CartProduct[]
}

model CartProduct {
  id        Int     @id @default(autoincrement())
  cart      Cart    @relation(fields: [cartId], references: [id])
  cartId    Int
  product   Product @relation(fields: [productId], references: [id])
  productId Int
  quantity  Int
}

model Review {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  product   Product  @relation(fields: [productId], references: [id])
  productId Int
  rating    Int
  comment   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Payment {
  id            Int           @id @default(autoincrement())
  order         Order         @relation(fields: [orderId], references: [id])
  orderId       Int           @unique
  paymentMethod String
  amount        Float
  status        PaymentStatus @default(PENDING)
  transactionId String?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
}

model ShippingAddress {
  id           Int      @id @default(autoincrement())
  user         User     @relation(fields: [userId], references: [id])
  userId       Int
  order        Order?   @relation(fields: [orderId], references: [id])
  orderId      Int?     @unique
  addressLine1 String
  addressLine2 String?
  city         String
  postalCode   String
  country      String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model Wishlist {
  id        Int               @id @default(autoincrement())
  user      User              @relation(fields: [userId], references: [id])
  userId    Int               @unique
  createdAt DateTime          @default(now())
  updatedAt DateTime          @updatedAt
  items     WishlistProduct[]
}

model WishlistProduct {
  id         Int      @id @default(autoincrement())
  wishlist   Wishlist @relation(fields: [wishlistId], references: [id])
  wishlistId Int
  product    Product  @relation(fields: [productId], references: [id])
  productId  Int
}
